type Following @model @auth(rules: [{allow: public}]) {
  id: ID!
  userID: ID!
  followedID: ID!
  followedName: String
}

type ReccuringAppointment @model @auth(rules: [{allow: public}]) {
  id: ID!
  bookerId: ID
  dayOfTheWeek: Int!
  start: AWSTime!
  end: AWSTime!
  fieldsID: ID! @index(name: "byFields")
  active: Boolean
}

enum Cities {
  PETRINJA
  ZAGREB
}

enum Sport {
  FUTSAL
  TENNIS
  BASKETBALL
}

enum Surface {
  ARTIFICIAL_GRASS
  RUBBER
  CONCRETE
  WOOD
}

type Response @model @auth(rules: [{allow: public}]) {
  id: ID!
  playerID: ID
  accepted: Boolean
  appointmentID: ID! @index(name: "byAppointment")
  playerName: String!
  playerPhoto: String
}

type Appointment @model @auth(rules: [{allow: public}]) {
  id: ID!
  start: AWSTime!
  end: AWSTime!
  fieldsID: ID! @index(name: "byFields")
  Responses: [Response] @hasMany(indexName: "byAppointment", fields: ["id"])
  date: AWSDate!
  confirmed: Boolean
  bookerID: ID
  bookerName: String
  sport: Sport
  price: Float
  canceled: Boolean
  Fields: Fields @belongsTo(fields: ["fieldsID"])
}

type Fields @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  address: String
  width: Float
  length: Float
  price: Float
  minPlayers: Int
  Appointments: [Appointment] @hasMany(indexName: "byFields", fields: ["id"])
  surface: Surface
  photo: String
  sports: [Sport]
  city: Cities
  ReccuringAppointments: [ReccuringAppointment] @hasMany(indexName: "byFields", fields: ["id"])
  ownerID: ID
}
 